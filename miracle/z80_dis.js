function disassemble(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  switch (opcode) {
case 0x00: res="<span class=opcode>NOP</span>";
break;
case 0x01: res="<span class=opcode>LD</span>";
res += " <span class=register>BC</span>," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x02: res="<span class=opcode>LD</span>";
res += " (<span class=register>BC</span>),<span class=register>A</span>";
break;
case 0x03: res="<span class=opcode>INC</span>";
res += " <span class=register>BC</span>";
break;
case 0x04: res="<span class=opcode>INC</span>";
res += " <span class=register>B</span>";
break;
case 0x05: res="<span class=opcode>DEC</span>";
res += " <span class=register>B</span>";
break;
case 0x06: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x07: res="<span class=opcode>RLCA</span>";
break;
case 0x08: res="<span class=opcode>EX</span>";
res += " <span class=register>AF</span>,<span class=register>AF</span>'";
break;
case 0x09: res="<span class=opcode>ADD</span>";
res += " <span class=register>HL</span>,<span class=register>BC</span>";
break;
case 0x0a: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,(<span class=register>BC</span>)";
break;
case 0x0b: res="<span class=opcode>DEC</span>";
res += " <span class=register>BC</span>";
break;
case 0x0c: res="<span class=opcode>INC</span>";
res += " <span class=register>C</span>";
break;
case 0x0d: res="<span class=opcode>DEC</span>";
res += " <span class=register>C</span>";
break;
case 0x0e: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x0f: res="<span class=opcode>RRCA</span>";
break;
case 0x10: res="<span class=opcode>DJNZ</span>";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " " + addressHtml(reladdr) + ""; address += 1;
break;
case 0x11: res="<span class=opcode>LD</span>";
res += " <span class=register>DE</span>," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x12: res="<span class=opcode>LD</span>";
res += " (<span class=register>DE</span>),<span class=register>A</span>";
break;
case 0x13: res="<span class=opcode>INC</span>";
res += " <span class=register>DE</span>";
break;
case 0x14: res="<span class=opcode>INC</span>";
res += " <span class=register>D</span>";
break;
case 0x15: res="<span class=opcode>DEC</span>";
res += " <span class=register>D</span>";
break;
case 0x16: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x17: res="<span class=opcode>RLA</span>";
break;
case 0x18: res="<span class=opcode>JR</span>";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " " + addressHtml(reladdr) + ""; address += 1;
break;
case 0x19: res="<span class=opcode>ADD</span>";
res += " <span class=register>HL</span>,<span class=register>DE</span>";
break;
case 0x1a: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,(<span class=register>DE</span>)";
break;
case 0x1b: res="<span class=opcode>DEC</span>";
res += " <span class=register>DE</span>";
break;
case 0x1c: res="<span class=opcode>INC</span>";
res += " <span class=register>E</span>";
break;
case 0x1d: res="<span class=opcode>DEC</span>";
res += " <span class=register>E</span>";
break;
case 0x1e: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x1f: res="<span class=opcode>RRA</span>";
break;
case 0x20: res="<span class=opcode>JR</span>";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " NZ," + addressHtml(reladdr) + ""; address += 1;
break;
case 0x21: res="<span class=opcode>LD</span>";
res += " <span class=register>HL</span>," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x22: res="<span class=opcode>LD</span>";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),<span class=register>HL</span>"; address += 2;
break;
case 0x23: res="<span class=opcode>INC</span>";
res += " <span class=register>HL</span>";
break;
case 0x24: res="<span class=opcode>INC</span>";
res += " <span class=register>H</span>";
break;
case 0x25: res="<span class=opcode>DEC</span>";
res += " <span class=register>H</span>";
break;
case 0x26: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x27: res="<span class=opcode>DAA</span>";
break;
case 0x28: res="<span class=opcode>JR</span>";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " Z," + addressHtml(reladdr) + ""; address += 1;
break;
case 0x29: res="<span class=opcode>ADD</span>";
res += " <span class=register>HL</span>,<span class=register>HL</span>";
break;
case 0x2a: res="<span class=opcode>LD</span>";
res += " <span class=register>HL</span>,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x2b: res="<span class=opcode>DEC</span>";
res += " <span class=register>HL</span>";
break;
case 0x2c: res="<span class=opcode>INC</span>";
res += " <span class=register>L</span>";
break;
case 0x2d: res="<span class=opcode>DEC</span>";
res += " <span class=register>L</span>";
break;
case 0x2e: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x2f: res="<span class=opcode>CPL</span>";
break;
case 0x30: res="<span class=opcode>JR</span>";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " NC," + addressHtml(reladdr) + ""; address += 1;
break;
case 0x31: res="<span class=opcode>LD</span>";
res += " <span class=register>SP</span>," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x32: res="<span class=opcode>LD</span>";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),<span class=register>A</span>"; address += 2;
break;
case 0x33: res="<span class=opcode>INC</span>";
res += " <span class=register>SP</span>";
break;
case 0x34: res="<span class=opcode>INC</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x35: res="<span class=opcode>DEC</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x36: res="<span class=opcode>LD</span>";
res += " (<span class=register>HL</span>),0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x37: res="<span class=opcode>SCF</span>";
break;
case 0x38: res="<span class=opcode>JR</span>";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " <span class=register>C</span>," + addressHtml(reladdr) + ""; address += 1;
break;
case 0x39: res="<span class=opcode>ADD</span>";
res += " <span class=register>HL</span>,<span class=register>SP</span>";
break;
case 0x3a: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x3b: res="<span class=opcode>DEC</span>";
res += " <span class=register>SP</span>";
break;
case 0x3c: res="<span class=opcode>INC</span>";
res += " <span class=register>A</span>";
break;
case 0x3d: res="<span class=opcode>DEC</span>";
res += " <span class=register>A</span>";
break;
case 0x3e: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x3f: res="<span class=opcode>CCF</span>";
break;
case 0x40: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>B</span>";
break;
case 0x41: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>C</span>";
break;
case 0x42: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>D</span>";
break;
case 0x43: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>E</span>";
break;
case 0x44: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>H</span>";
break;
case 0x45: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>L</span>";
break;
case 0x46: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,(<span class=register>HL</span>)";
break;
case 0x47: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>A</span>";
break;
case 0x48: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>B</span>";
break;
case 0x49: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>C</span>";
break;
case 0x4a: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>D</span>";
break;
case 0x4b: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>E</span>";
break;
case 0x4c: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>H</span>";
break;
case 0x4d: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>L</span>";
break;
case 0x4e: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,(<span class=register>HL</span>)";
break;
case 0x4f: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>A</span>";
break;
case 0x50: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>B</span>";
break;
case 0x51: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>C</span>";
break;
case 0x52: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>D</span>";
break;
case 0x53: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>E</span>";
break;
case 0x54: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>H</span>";
break;
case 0x55: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>L</span>";
break;
case 0x56: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,(<span class=register>HL</span>)";
break;
case 0x57: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>A</span>";
break;
case 0x58: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>B</span>";
break;
case 0x59: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>C</span>";
break;
case 0x5a: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>D</span>";
break;
case 0x5b: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>E</span>";
break;
case 0x5c: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>H</span>";
break;
case 0x5d: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>L</span>";
break;
case 0x5e: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,(<span class=register>HL</span>)";
break;
case 0x5f: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>A</span>";
break;
case 0x60: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,<span class=register>B</span>";
break;
case 0x61: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,<span class=register>C</span>";
break;
case 0x62: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,<span class=register>D</span>";
break;
case 0x63: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,<span class=register>E</span>";
break;
case 0x64: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,<span class=register>H</span>";
break;
case 0x65: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,<span class=register>L</span>";
break;
case 0x66: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,(<span class=register>HL</span>)";
break;
case 0x67: res="<span class=opcode>LD</span>";
res += " <span class=register>H</span>,<span class=register>A</span>";
break;
case 0x68: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,<span class=register>B</span>";
break;
case 0x69: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,<span class=register>C</span>";
break;
case 0x6a: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,<span class=register>D</span>";
break;
case 0x6b: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,<span class=register>E</span>";
break;
case 0x6c: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,<span class=register>H</span>";
break;
case 0x6d: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,<span class=register>L</span>";
break;
case 0x6e: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,(<span class=register>HL</span>)";
break;
case 0x6f: res="<span class=opcode>LD</span>";
res += " <span class=register>L</span>,<span class=register>A</span>";
break;
case 0x70: res="<span class=opcode>LD</span>";
res += " (<span class=register>HL</span>),<span class=register>B</span>";
break;
case 0x71: res="<span class=opcode>LD</span>";
res += " (<span class=register>HL</span>),<span class=register>C</span>";
break;
case 0x72: res="<span class=opcode>LD</span>";
res += " (<span class=register>HL</span>),<span class=register>D</span>";
break;
case 0x73: res="<span class=opcode>LD</span>";
res += " (<span class=register>HL</span>),<span class=register>E</span>";
break;
case 0x74: res="<span class=opcode>LD</span>";
res += " (<span class=register>HL</span>),<span class=register>H</span>";
break;
case 0x75: res="<span class=opcode>LD</span>";
res += " (<span class=register>HL</span>),<span class=register>L</span>";
break;
case 0x76: res="<span class=opcode>HALT</span>";
break;
case 0x77: res="<span class=opcode>LD</span>";
res += " (<span class=register>HL</span>),<span class=register>A</span>";
break;
case 0x78: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>B</span>";
break;
case 0x79: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>C</span>";
break;
case 0x7a: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>D</span>";
break;
case 0x7b: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>E</span>";
break;
case 0x7c: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>H</span>";
break;
case 0x7d: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>L</span>";
break;
case 0x7e: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,(<span class=register>HL</span>)";
break;
case 0x7f: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>A</span>";
break;
case 0x80: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>B</span>";
break;
case 0x81: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>C</span>";
break;
case 0x82: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>D</span>";
break;
case 0x83: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>E</span>";
break;
case 0x84: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>H</span>";
break;
case 0x85: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>L</span>";
break;
case 0x86: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,(<span class=register>HL</span>)";
break;
case 0x87: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>A</span>";
break;
case 0x88: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>B</span>";
break;
case 0x89: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>C</span>";
break;
case 0x8a: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>D</span>";
break;
case 0x8b: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>E</span>";
break;
case 0x8c: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>H</span>";
break;
case 0x8d: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>L</span>";
break;
case 0x8e: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,(<span class=register>HL</span>)";
break;
case 0x8f: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>A</span>";
break;
case 0x90: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>B</span>";
break;
case 0x91: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>C</span>";
break;
case 0x92: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>D</span>";
break;
case 0x93: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>E</span>";
break;
case 0x94: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>H</span>";
break;
case 0x95: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>L</span>";
break;
case 0x96: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,(<span class=register>HL</span>)";
break;
case 0x97: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>A</span>";
break;
case 0x98: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>B</span>";
break;
case 0x99: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>C</span>";
break;
case 0x9a: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>D</span>";
break;
case 0x9b: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>E</span>";
break;
case 0x9c: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>H</span>";
break;
case 0x9d: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>L</span>";
break;
case 0x9e: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,(<span class=register>HL</span>)";
break;
case 0x9f: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>A</span>";
break;
case 0xa0: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>B</span>";
break;
case 0xa1: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>C</span>";
break;
case 0xa2: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>D</span>";
break;
case 0xa3: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>E</span>";
break;
case 0xa4: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>H</span>";
break;
case 0xa5: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>L</span>";
break;
case 0xa6: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,(<span class=register>HL</span>)";
break;
case 0xa7: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>A</span>";
break;
case 0xa8: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>B</span>";
break;
case 0xa9: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>C</span>";
break;
case 0xaa: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>D</span>";
break;
case 0xab: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>E</span>";
break;
case 0xac: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>H</span>";
break;
case 0xad: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>L</span>";
break;
case 0xae: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,(<span class=register>HL</span>)";
break;
case 0xaf: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>A</span>";
break;
case 0xb0: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>B</span>";
break;
case 0xb1: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>C</span>";
break;
case 0xb2: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>D</span>";
break;
case 0xb3: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>E</span>";
break;
case 0xb4: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>H</span>";
break;
case 0xb5: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>L</span>";
break;
case 0xb6: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,(<span class=register>HL</span>)";
break;
case 0xb7: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>A</span>";
break;
case 0xb8: res="<span class=opcode>CP</span>";
res += " <span class=register>B</span>";
break;
case 0xb9: res="<span class=opcode>CP</span>";
res += " <span class=register>C</span>";
break;
case 0xba: res="<span class=opcode>CP</span>";
res += " <span class=register>D</span>";
break;
case 0xbb: res="<span class=opcode>CP</span>";
res += " <span class=register>E</span>";
break;
case 0xbc: res="<span class=opcode>CP</span>";
res += " <span class=register>H</span>";
break;
case 0xbd: res="<span class=opcode>CP</span>";
res += " <span class=register>L</span>";
break;
case 0xbe: res="<span class=opcode>CP</span>";
res += " (<span class=register>HL</span>)";
break;
case 0xbf: res="<span class=opcode>CP</span>";
res += " <span class=register>A</span>";
break;
case 0xc0: res="<span class=opcode>RET</span>";
res += " NZ";
break;
case 0xc1: res="<span class=opcode>POP</span>";
res += " <span class=register>BC</span>";
break;
case 0xc2: res="<span class=opcode>JP</span>";
res += " NZ," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xc3: res="<span class=opcode>JP</span>";
res += " " + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xc4: res="<span class=opcode>CALL</span>";
res += " NZ," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xc5: res="<span class=opcode>PUSH</span>";
res += " <span class=register>BC</span>";
break;
case 0xc6: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xc7: res="<span class=opcode>RST</span>";
res += " " + addressHtml(0x00);
break;
case 0xc8: res="<span class=opcode>RET</span>";
res += " Z";
break;
case 0xc9: res="<span class=opcode>RET</span>";
break;
case 0xca: res="<span class=opcode>JP</span>";
res += " Z," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xcb: return disassemble_CB(address);
case 0xcc: res="<span class=opcode>CALL</span>";
res += " Z," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xcd: res="<span class=opcode>CALL</span>";
res += " " + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xce: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xcf: res="<span class=opcode>RST</span>";
res += " " + addressHtml(0x8);
break;
case 0xd0: res="<span class=opcode>RET</span>";
res += " NC";
break;
case 0xd1: res="<span class=opcode>POP</span>";
res += " <span class=register>DE</span>";
break;
case 0xd2: res="<span class=opcode>JP</span>";
res += " NC," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xd3: res="<span class=opcode>OUT</span>";
res += " (0x" + hexbyte(readbyte(address)) + "),<span class=register>A</span>"; address += 1;
break;
case 0xd4: res="<span class=opcode>CALL</span>";
res += " NC," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xd5: res="<span class=opcode>PUSH</span>";
res += " <span class=register>DE</span>";
break;
case 0xd6: res="<span class=opcode>SUB</span>";
res += " 0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xd7: res="<span class=opcode>RST</span>";
res += " " + addressHtml(0x10);
break;
case 0xd8: res="<span class=opcode>RET</span>";
res += " <span class=register>C</span>";
break;
case 0xd9: res="<span class=opcode>EXX</span>";
break;
case 0xda: res="<span class=opcode>JP</span>";
res += " <span class=register>C</span>," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xdb: res="<span class=opcode>IN</span>";
res += " <span class=register>A</span>,(0x" + hexbyte(readbyte(address)) + ")"; address += 1;
break;
case 0xdc: res="<span class=opcode>CALL</span>";
res += " <span class=register>C</span>," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xdd: return disassemble_DD(address);
case 0xde: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xdf: res="<span class=opcode>RST</span>";
res += " " + addressHtml(0x18);
break;
case 0xe0: res="<span class=opcode>RET</span>";
res += " PO";
break;
case 0xe1: res="<span class=opcode>POP</span>";
res += " <span class=register>HL</span>";
break;
case 0xe2: res="<span class=opcode>JP</span>";
res += " PO," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xe3: res="<span class=opcode>EX</span>";
res += " (<span class=register>SP</span>),<span class=register>HL</span>";
break;
case 0xe4: res="<span class=opcode>CALL</span>";
res += " PO," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xe5: res="<span class=opcode>PUSH</span>";
res += " <span class=register>HL</span>";
break;
case 0xe6: res="<span class=opcode>AND</span>";
res += " 0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xe7: res="<span class=opcode>RST</span>";
res += " " + addressHtml(0x20);
break;
case 0xe8: res="<span class=opcode>RET</span>";
res += " PE";
break;
case 0xe9: res="<span class=opcode>JP</span>";
res += " <span class=register>HL</span>";
break;
case 0xea: res="<span class=opcode>JP</span>";
res += " PE," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xeb: res="<span class=opcode>EX</span>";
res += " <span class=register>DE</span>,<span class=register>HL</span>";
break;
case 0xec: res="<span class=opcode>CALL</span>";
res += " PE," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xed: return disassemble_ED(address);
case 0xee: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xef: res="<span class=opcode>RST</span>";
res += " " + addressHtml(0x28);
break;
case 0xf0: res="<span class=opcode>RET</span>";
res += " P";
break;
case 0xf1: res="<span class=opcode>POP</span>";
res += " <span class=register>AF</span>";
break;
case 0xf2: res="<span class=opcode>JP</span>";
res += " P," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xf3: res="<span class=opcode>DI</span>";
break;
case 0xf4: res="<span class=opcode>CALL</span>";
res += " P," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xf5: res="<span class=opcode>PUSH</span>";
res += " <span class=register>AF</span>";
break;
case 0xf6: res="<span class=opcode>OR</span>";
res += " 0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xf7: res="<span class=opcode>RST</span>";
res += " " + addressHtml(0x30);
break;
case 0xf8: res="<span class=opcode>RET</span>";
res += " M";
break;
case 0xf9: res="<span class=opcode>LD</span>";
res += " <span class=register>SP</span>,<span class=register>HL</span>";
break;
case 0xfa: res="<span class=opcode>JP</span>";
res += " M," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xfb: res="<span class=opcode>EI</span>";
break;
case 0xfc: res="<span class=opcode>CALL</span>";
res += " M," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xfd: return disassemble_FD(address);
case 0xfe: res="<span class=opcode>CP</span>";
res += " 0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xff: res="<span class=opcode>RST</span>";
res += " " + addressHtml(0x38);
break;
  }
  return [res, address];
}
function disassemble_CB(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  switch (opcode) {
case 0x00: res="<span class=opcode>RLC</span>";
res += " <span class=register>B</span>";
break;
case 0x01: res="<span class=opcode>RLC</span>";
res += " <span class=register>C</span>";
break;
case 0x02: res="<span class=opcode>RLC</span>";
res += " <span class=register>D</span>";
break;
case 0x03: res="<span class=opcode>RLC</span>";
res += " <span class=register>E</span>";
break;
case 0x04: res="<span class=opcode>RLC</span>";
res += " <span class=register>H</span>";
break;
case 0x05: res="<span class=opcode>RLC</span>";
res += " <span class=register>L</span>";
break;
case 0x06: res="<span class=opcode>RLC</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x07: res="<span class=opcode>RLC</span>";
res += " <span class=register>A</span>";
break;
case 0x08: res="<span class=opcode>RRC</span>";
res += " <span class=register>B</span>";
break;
case 0x09: res="<span class=opcode>RRC</span>";
res += " <span class=register>C</span>";
break;
case 0x0a: res="<span class=opcode>RRC</span>";
res += " <span class=register>D</span>";
break;
case 0x0b: res="<span class=opcode>RRC</span>";
res += " <span class=register>E</span>";
break;
case 0x0c: res="<span class=opcode>RRC</span>";
res += " <span class=register>H</span>";
break;
case 0x0d: res="<span class=opcode>RRC</span>";
res += " <span class=register>L</span>";
break;
case 0x0e: res="<span class=opcode>RRC</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x0f: res="<span class=opcode>RRC</span>";
res += " <span class=register>A</span>";
break;
case 0x10: res="<span class=opcode>RL</span>";
res += " <span class=register>B</span>";
break;
case 0x11: res="<span class=opcode>RL</span>";
res += " <span class=register>C</span>";
break;
case 0x12: res="<span class=opcode>RL</span>";
res += " <span class=register>D</span>";
break;
case 0x13: res="<span class=opcode>RL</span>";
res += " <span class=register>E</span>";
break;
case 0x14: res="<span class=opcode>RL</span>";
res += " <span class=register>H</span>";
break;
case 0x15: res="<span class=opcode>RL</span>";
res += " <span class=register>L</span>";
break;
case 0x16: res="<span class=opcode>RL</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x17: res="<span class=opcode>RL</span>";
res += " <span class=register>A</span>";
break;
case 0x18: res="<span class=opcode>RR</span>";
res += " <span class=register>B</span>";
break;
case 0x19: res="<span class=opcode>RR</span>";
res += " <span class=register>C</span>";
break;
case 0x1a: res="<span class=opcode>RR</span>";
res += " <span class=register>D</span>";
break;
case 0x1b: res="<span class=opcode>RR</span>";
res += " <span class=register>E</span>";
break;
case 0x1c: res="<span class=opcode>RR</span>";
res += " <span class=register>H</span>";
break;
case 0x1d: res="<span class=opcode>RR</span>";
res += " <span class=register>L</span>";
break;
case 0x1e: res="<span class=opcode>RR</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x1f: res="<span class=opcode>RR</span>";
res += " <span class=register>A</span>";
break;
case 0x20: res="<span class=opcode>SLA</span>";
res += " <span class=register>B</span>";
break;
case 0x21: res="<span class=opcode>SLA</span>";
res += " <span class=register>C</span>";
break;
case 0x22: res="<span class=opcode>SLA</span>";
res += " <span class=register>D</span>";
break;
case 0x23: res="<span class=opcode>SLA</span>";
res += " <span class=register>E</span>";
break;
case 0x24: res="<span class=opcode>SLA</span>";
res += " <span class=register>H</span>";
break;
case 0x25: res="<span class=opcode>SLA</span>";
res += " <span class=register>L</span>";
break;
case 0x26: res="<span class=opcode>SLA</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x27: res="<span class=opcode>SLA</span>";
res += " <span class=register>A</span>";
break;
case 0x28: res="<span class=opcode>SRA</span>";
res += " <span class=register>B</span>";
break;
case 0x29: res="<span class=opcode>SRA</span>";
res += " <span class=register>C</span>";
break;
case 0x2a: res="<span class=opcode>SRA</span>";
res += " <span class=register>D</span>";
break;
case 0x2b: res="<span class=opcode>SRA</span>";
res += " <span class=register>E</span>";
break;
case 0x2c: res="<span class=opcode>SRA</span>";
res += " <span class=register>H</span>";
break;
case 0x2d: res="<span class=opcode>SRA</span>";
res += " <span class=register>L</span>";
break;
case 0x2e: res="<span class=opcode>SRA</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x2f: res="<span class=opcode>SRA</span>";
res += " <span class=register>A</span>";
break;
case 0x30: res="<span class=opcode>SLL</span>";
res += " <span class=register>B</span>";
break;
case 0x31: res="<span class=opcode>SLL</span>";
res += " <span class=register>C</span>";
break;
case 0x32: res="<span class=opcode>SLL</span>";
res += " <span class=register>D</span>";
break;
case 0x33: res="<span class=opcode>SLL</span>";
res += " <span class=register>E</span>";
break;
case 0x34: res="<span class=opcode>SLL</span>";
res += " <span class=register>H</span>";
break;
case 0x35: res="<span class=opcode>SLL</span>";
res += " <span class=register>L</span>";
break;
case 0x36: res="<span class=opcode>SLL</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x37: res="<span class=opcode>SLL</span>";
res += " <span class=register>A</span>";
break;
case 0x38: res="<span class=opcode>SRL</span>";
res += " <span class=register>B</span>";
break;
case 0x39: res="<span class=opcode>SRL</span>";
res += " <span class=register>C</span>";
break;
case 0x3a: res="<span class=opcode>SRL</span>";
res += " <span class=register>D</span>";
break;
case 0x3b: res="<span class=opcode>SRL</span>";
res += " <span class=register>E</span>";
break;
case 0x3c: res="<span class=opcode>SRL</span>";
res += " <span class=register>H</span>";
break;
case 0x3d: res="<span class=opcode>SRL</span>";
res += " <span class=register>L</span>";
break;
case 0x3e: res="<span class=opcode>SRL</span>";
res += " (<span class=register>HL</span>)";
break;
case 0x3f: res="<span class=opcode>SRL</span>";
res += " <span class=register>A</span>";
break;
case 0x40: res="<span class=opcode>BIT</span>";
res += " 0,<span class=register>B</span>";
break;
case 0x41: res="<span class=opcode>BIT</span>";
res += " 0,<span class=register>C</span>";
break;
case 0x42: res="<span class=opcode>BIT</span>";
res += " 0,<span class=register>D</span>";
break;
case 0x43: res="<span class=opcode>BIT</span>";
res += " 0,<span class=register>E</span>";
break;
case 0x44: res="<span class=opcode>BIT</span>";
res += " 0,<span class=register>H</span>";
break;
case 0x45: res="<span class=opcode>BIT</span>";
res += " 0,<span class=register>L</span>";
break;
case 0x46: res="<span class=opcode>BIT</span>";
res += " 0,(<span class=register>HL</span>)";
break;
case 0x47: res="<span class=opcode>BIT</span>";
res += " 0,<span class=register>A</span>";
break;
case 0x48: res="<span class=opcode>BIT</span>";
res += " 1,<span class=register>B</span>";
break;
case 0x49: res="<span class=opcode>BIT</span>";
res += " 1,<span class=register>C</span>";
break;
case 0x4a: res="<span class=opcode>BIT</span>";
res += " 1,<span class=register>D</span>";
break;
case 0x4b: res="<span class=opcode>BIT</span>";
res += " 1,<span class=register>E</span>";
break;
case 0x4c: res="<span class=opcode>BIT</span>";
res += " 1,<span class=register>H</span>";
break;
case 0x4d: res="<span class=opcode>BIT</span>";
res += " 1,<span class=register>L</span>";
break;
case 0x4e: res="<span class=opcode>BIT</span>";
res += " 1,(<span class=register>HL</span>)";
break;
case 0x4f: res="<span class=opcode>BIT</span>";
res += " 1,<span class=register>A</span>";
break;
case 0x50: res="<span class=opcode>BIT</span>";
res += " 2,<span class=register>B</span>";
break;
case 0x51: res="<span class=opcode>BIT</span>";
res += " 2,<span class=register>C</span>";
break;
case 0x52: res="<span class=opcode>BIT</span>";
res += " 2,<span class=register>D</span>";
break;
case 0x53: res="<span class=opcode>BIT</span>";
res += " 2,<span class=register>E</span>";
break;
case 0x54: res="<span class=opcode>BIT</span>";
res += " 2,<span class=register>H</span>";
break;
case 0x55: res="<span class=opcode>BIT</span>";
res += " 2,<span class=register>L</span>";
break;
case 0x56: res="<span class=opcode>BIT</span>";
res += " 2,(<span class=register>HL</span>)";
break;
case 0x57: res="<span class=opcode>BIT</span>";
res += " 2,<span class=register>A</span>";
break;
case 0x58: res="<span class=opcode>BIT</span>";
res += " 3,<span class=register>B</span>";
break;
case 0x59: res="<span class=opcode>BIT</span>";
res += " 3,<span class=register>C</span>";
break;
case 0x5a: res="<span class=opcode>BIT</span>";
res += " 3,<span class=register>D</span>";
break;
case 0x5b: res="<span class=opcode>BIT</span>";
res += " 3,<span class=register>E</span>";
break;
case 0x5c: res="<span class=opcode>BIT</span>";
res += " 3,<span class=register>H</span>";
break;
case 0x5d: res="<span class=opcode>BIT</span>";
res += " 3,<span class=register>L</span>";
break;
case 0x5e: res="<span class=opcode>BIT</span>";
res += " 3,(<span class=register>HL</span>)";
break;
case 0x5f: res="<span class=opcode>BIT</span>";
res += " 3,<span class=register>A</span>";
break;
case 0x60: res="<span class=opcode>BIT</span>";
res += " 4,<span class=register>B</span>";
break;
case 0x61: res="<span class=opcode>BIT</span>";
res += " 4,<span class=register>C</span>";
break;
case 0x62: res="<span class=opcode>BIT</span>";
res += " 4,<span class=register>D</span>";
break;
case 0x63: res="<span class=opcode>BIT</span>";
res += " 4,<span class=register>E</span>";
break;
case 0x64: res="<span class=opcode>BIT</span>";
res += " 4,<span class=register>H</span>";
break;
case 0x65: res="<span class=opcode>BIT</span>";
res += " 4,<span class=register>L</span>";
break;
case 0x66: res="<span class=opcode>BIT</span>";
res += " 4,(<span class=register>HL</span>)";
break;
case 0x67: res="<span class=opcode>BIT</span>";
res += " 4,<span class=register>A</span>";
break;
case 0x68: res="<span class=opcode>BIT</span>";
res += " 5,<span class=register>B</span>";
break;
case 0x69: res="<span class=opcode>BIT</span>";
res += " 5,<span class=register>C</span>";
break;
case 0x6a: res="<span class=opcode>BIT</span>";
res += " 5,<span class=register>D</span>";
break;
case 0x6b: res="<span class=opcode>BIT</span>";
res += " 5,<span class=register>E</span>";
break;
case 0x6c: res="<span class=opcode>BIT</span>";
res += " 5,<span class=register>H</span>";
break;
case 0x6d: res="<span class=opcode>BIT</span>";
res += " 5,<span class=register>L</span>";
break;
case 0x6e: res="<span class=opcode>BIT</span>";
res += " 5,(<span class=register>HL</span>)";
break;
case 0x6f: res="<span class=opcode>BIT</span>";
res += " 5,<span class=register>A</span>";
break;
case 0x70: res="<span class=opcode>BIT</span>";
res += " 6,<span class=register>B</span>";
break;
case 0x71: res="<span class=opcode>BIT</span>";
res += " 6,<span class=register>C</span>";
break;
case 0x72: res="<span class=opcode>BIT</span>";
res += " 6,<span class=register>D</span>";
break;
case 0x73: res="<span class=opcode>BIT</span>";
res += " 6,<span class=register>E</span>";
break;
case 0x74: res="<span class=opcode>BIT</span>";
res += " 6,<span class=register>H</span>";
break;
case 0x75: res="<span class=opcode>BIT</span>";
res += " 6,<span class=register>L</span>";
break;
case 0x76: res="<span class=opcode>BIT</span>";
res += " 6,(<span class=register>HL</span>)";
break;
case 0x77: res="<span class=opcode>BIT</span>";
res += " 6,<span class=register>A</span>";
break;
case 0x78: res="<span class=opcode>BIT</span>";
res += " 7,<span class=register>B</span>";
break;
case 0x79: res="<span class=opcode>BIT</span>";
res += " 7,<span class=register>C</span>";
break;
case 0x7a: res="<span class=opcode>BIT</span>";
res += " 7,<span class=register>D</span>";
break;
case 0x7b: res="<span class=opcode>BIT</span>";
res += " 7,<span class=register>E</span>";
break;
case 0x7c: res="<span class=opcode>BIT</span>";
res += " 7,<span class=register>H</span>";
break;
case 0x7d: res="<span class=opcode>BIT</span>";
res += " 7,<span class=register>L</span>";
break;
case 0x7e: res="<span class=opcode>BIT</span>";
res += " 7,(<span class=register>HL</span>)";
break;
case 0x7f: res="<span class=opcode>BIT</span>";
res += " 7,<span class=register>A</span>";
break;
case 0x80: res="<span class=opcode>RES</span>";
res += " 0,<span class=register>B</span>";
break;
case 0x81: res="<span class=opcode>RES</span>";
res += " 0,<span class=register>C</span>";
break;
case 0x82: res="<span class=opcode>RES</span>";
res += " 0,<span class=register>D</span>";
break;
case 0x83: res="<span class=opcode>RES</span>";
res += " 0,<span class=register>E</span>";
break;
case 0x84: res="<span class=opcode>RES</span>";
res += " 0,<span class=register>H</span>";
break;
case 0x85: res="<span class=opcode>RES</span>";
res += " 0,<span class=register>L</span>";
break;
case 0x86: res="<span class=opcode>RES</span>";
res += " 0,(<span class=register>HL</span>)";
break;
case 0x87: res="<span class=opcode>RES</span>";
res += " 0,<span class=register>A</span>";
break;
case 0x88: res="<span class=opcode>RES</span>";
res += " 1,<span class=register>B</span>";
break;
case 0x89: res="<span class=opcode>RES</span>";
res += " 1,<span class=register>C</span>";
break;
case 0x8a: res="<span class=opcode>RES</span>";
res += " 1,<span class=register>D</span>";
break;
case 0x8b: res="<span class=opcode>RES</span>";
res += " 1,<span class=register>E</span>";
break;
case 0x8c: res="<span class=opcode>RES</span>";
res += " 1,<span class=register>H</span>";
break;
case 0x8d: res="<span class=opcode>RES</span>";
res += " 1,<span class=register>L</span>";
break;
case 0x8e: res="<span class=opcode>RES</span>";
res += " 1,(<span class=register>HL</span>)";
break;
case 0x8f: res="<span class=opcode>RES</span>";
res += " 1,<span class=register>A</span>";
break;
case 0x90: res="<span class=opcode>RES</span>";
res += " 2,<span class=register>B</span>";
break;
case 0x91: res="<span class=opcode>RES</span>";
res += " 2,<span class=register>C</span>";
break;
case 0x92: res="<span class=opcode>RES</span>";
res += " 2,<span class=register>D</span>";
break;
case 0x93: res="<span class=opcode>RES</span>";
res += " 2,<span class=register>E</span>";
break;
case 0x94: res="<span class=opcode>RES</span>";
res += " 2,<span class=register>H</span>";
break;
case 0x95: res="<span class=opcode>RES</span>";
res += " 2,<span class=register>L</span>";
break;
case 0x96: res="<span class=opcode>RES</span>";
res += " 2,(<span class=register>HL</span>)";
break;
case 0x97: res="<span class=opcode>RES</span>";
res += " 2,<span class=register>A</span>";
break;
case 0x98: res="<span class=opcode>RES</span>";
res += " 3,<span class=register>B</span>";
break;
case 0x99: res="<span class=opcode>RES</span>";
res += " 3,<span class=register>C</span>";
break;
case 0x9a: res="<span class=opcode>RES</span>";
res += " 3,<span class=register>D</span>";
break;
case 0x9b: res="<span class=opcode>RES</span>";
res += " 3,<span class=register>E</span>";
break;
case 0x9c: res="<span class=opcode>RES</span>";
res += " 3,<span class=register>H</span>";
break;
case 0x9d: res="<span class=opcode>RES</span>";
res += " 3,<span class=register>L</span>";
break;
case 0x9e: res="<span class=opcode>RES</span>";
res += " 3,(<span class=register>HL</span>)";
break;
case 0x9f: res="<span class=opcode>RES</span>";
res += " 3,<span class=register>A</span>";
break;
case 0xa0: res="<span class=opcode>RES</span>";
res += " 4,<span class=register>B</span>";
break;
case 0xa1: res="<span class=opcode>RES</span>";
res += " 4,<span class=register>C</span>";
break;
case 0xa2: res="<span class=opcode>RES</span>";
res += " 4,<span class=register>D</span>";
break;
case 0xa3: res="<span class=opcode>RES</span>";
res += " 4,<span class=register>E</span>";
break;
case 0xa4: res="<span class=opcode>RES</span>";
res += " 4,<span class=register>H</span>";
break;
case 0xa5: res="<span class=opcode>RES</span>";
res += " 4,<span class=register>L</span>";
break;
case 0xa6: res="<span class=opcode>RES</span>";
res += " 4,(<span class=register>HL</span>)";
break;
case 0xa7: res="<span class=opcode>RES</span>";
res += " 4,<span class=register>A</span>";
break;
case 0xa8: res="<span class=opcode>RES</span>";
res += " 5,<span class=register>B</span>";
break;
case 0xa9: res="<span class=opcode>RES</span>";
res += " 5,<span class=register>C</span>";
break;
case 0xaa: res="<span class=opcode>RES</span>";
res += " 5,<span class=register>D</span>";
break;
case 0xab: res="<span class=opcode>RES</span>";
res += " 5,<span class=register>E</span>";
break;
case 0xac: res="<span class=opcode>RES</span>";
res += " 5,<span class=register>H</span>";
break;
case 0xad: res="<span class=opcode>RES</span>";
res += " 5,<span class=register>L</span>";
break;
case 0xae: res="<span class=opcode>RES</span>";
res += " 5,(<span class=register>HL</span>)";
break;
case 0xaf: res="<span class=opcode>RES</span>";
res += " 5,<span class=register>A</span>";
break;
case 0xb0: res="<span class=opcode>RES</span>";
res += " 6,<span class=register>B</span>";
break;
case 0xb1: res="<span class=opcode>RES</span>";
res += " 6,<span class=register>C</span>";
break;
case 0xb2: res="<span class=opcode>RES</span>";
res += " 6,<span class=register>D</span>";
break;
case 0xb3: res="<span class=opcode>RES</span>";
res += " 6,<span class=register>E</span>";
break;
case 0xb4: res="<span class=opcode>RES</span>";
res += " 6,<span class=register>H</span>";
break;
case 0xb5: res="<span class=opcode>RES</span>";
res += " 6,<span class=register>L</span>";
break;
case 0xb6: res="<span class=opcode>RES</span>";
res += " 6,(<span class=register>HL</span>)";
break;
case 0xb7: res="<span class=opcode>RES</span>";
res += " 6,<span class=register>A</span>";
break;
case 0xb8: res="<span class=opcode>RES</span>";
res += " 7,<span class=register>B</span>";
break;
case 0xb9: res="<span class=opcode>RES</span>";
res += " 7,<span class=register>C</span>";
break;
case 0xba: res="<span class=opcode>RES</span>";
res += " 7,<span class=register>D</span>";
break;
case 0xbb: res="<span class=opcode>RES</span>";
res += " 7,<span class=register>E</span>";
break;
case 0xbc: res="<span class=opcode>RES</span>";
res += " 7,<span class=register>H</span>";
break;
case 0xbd: res="<span class=opcode>RES</span>";
res += " 7,<span class=register>L</span>";
break;
case 0xbe: res="<span class=opcode>RES</span>";
res += " 7,(<span class=register>HL</span>)";
break;
case 0xbf: res="<span class=opcode>RES</span>";
res += " 7,<span class=register>A</span>";
break;
case 0xc0: res="<span class=opcode>SET</span>";
res += " 0,<span class=register>B</span>";
break;
case 0xc1: res="<span class=opcode>SET</span>";
res += " 0,<span class=register>C</span>";
break;
case 0xc2: res="<span class=opcode>SET</span>";
res += " 0,<span class=register>D</span>";
break;
case 0xc3: res="<span class=opcode>SET</span>";
res += " 0,<span class=register>E</span>";
break;
case 0xc4: res="<span class=opcode>SET</span>";
res += " 0,<span class=register>H</span>";
break;
case 0xc5: res="<span class=opcode>SET</span>";
res += " 0,<span class=register>L</span>";
break;
case 0xc6: res="<span class=opcode>SET</span>";
res += " 0,(<span class=register>HL</span>)";
break;
case 0xc7: res="<span class=opcode>SET</span>";
res += " 0,<span class=register>A</span>";
break;
case 0xc8: res="<span class=opcode>SET</span>";
res += " 1,<span class=register>B</span>";
break;
case 0xc9: res="<span class=opcode>SET</span>";
res += " 1,<span class=register>C</span>";
break;
case 0xca: res="<span class=opcode>SET</span>";
res += " 1,<span class=register>D</span>";
break;
case 0xcb: res="<span class=opcode>SET</span>";
res += " 1,<span class=register>E</span>";
break;
case 0xcc: res="<span class=opcode>SET</span>";
res += " 1,<span class=register>H</span>";
break;
case 0xcd: res="<span class=opcode>SET</span>";
res += " 1,<span class=register>L</span>";
break;
case 0xce: res="<span class=opcode>SET</span>";
res += " 1,(<span class=register>HL</span>)";
break;
case 0xcf: res="<span class=opcode>SET</span>";
res += " 1,<span class=register>A</span>";
break;
case 0xd0: res="<span class=opcode>SET</span>";
res += " 2,<span class=register>B</span>";
break;
case 0xd1: res="<span class=opcode>SET</span>";
res += " 2,<span class=register>C</span>";
break;
case 0xd2: res="<span class=opcode>SET</span>";
res += " 2,<span class=register>D</span>";
break;
case 0xd3: res="<span class=opcode>SET</span>";
res += " 2,<span class=register>E</span>";
break;
case 0xd4: res="<span class=opcode>SET</span>";
res += " 2,<span class=register>H</span>";
break;
case 0xd5: res="<span class=opcode>SET</span>";
res += " 2,<span class=register>L</span>";
break;
case 0xd6: res="<span class=opcode>SET</span>";
res += " 2,(<span class=register>HL</span>)";
break;
case 0xd7: res="<span class=opcode>SET</span>";
res += " 2,<span class=register>A</span>";
break;
case 0xd8: res="<span class=opcode>SET</span>";
res += " 3,<span class=register>B</span>";
break;
case 0xd9: res="<span class=opcode>SET</span>";
res += " 3,<span class=register>C</span>";
break;
case 0xda: res="<span class=opcode>SET</span>";
res += " 3,<span class=register>D</span>";
break;
case 0xdb: res="<span class=opcode>SET</span>";
res += " 3,<span class=register>E</span>";
break;
case 0xdc: res="<span class=opcode>SET</span>";
res += " 3,<span class=register>H</span>";
break;
case 0xdd: res="<span class=opcode>SET</span>";
res += " 3,<span class=register>L</span>";
break;
case 0xde: res="<span class=opcode>SET</span>";
res += " 3,(<span class=register>HL</span>)";
break;
case 0xdf: res="<span class=opcode>SET</span>";
res += " 3,<span class=register>A</span>";
break;
case 0xe0: res="<span class=opcode>SET</span>";
res += " 4,<span class=register>B</span>";
break;
case 0xe1: res="<span class=opcode>SET</span>";
res += " 4,<span class=register>C</span>";
break;
case 0xe2: res="<span class=opcode>SET</span>";
res += " 4,<span class=register>D</span>";
break;
case 0xe3: res="<span class=opcode>SET</span>";
res += " 4,<span class=register>E</span>";
break;
case 0xe4: res="<span class=opcode>SET</span>";
res += " 4,<span class=register>H</span>";
break;
case 0xe5: res="<span class=opcode>SET</span>";
res += " 4,<span class=register>L</span>";
break;
case 0xe6: res="<span class=opcode>SET</span>";
res += " 4,(<span class=register>HL</span>)";
break;
case 0xe7: res="<span class=opcode>SET</span>";
res += " 4,<span class=register>A</span>";
break;
case 0xe8: res="<span class=opcode>SET</span>";
res += " 5,<span class=register>B</span>";
break;
case 0xe9: res="<span class=opcode>SET</span>";
res += " 5,<span class=register>C</span>";
break;
case 0xea: res="<span class=opcode>SET</span>";
res += " 5,<span class=register>D</span>";
break;
case 0xeb: res="<span class=opcode>SET</span>";
res += " 5,<span class=register>E</span>";
break;
case 0xec: res="<span class=opcode>SET</span>";
res += " 5,<span class=register>H</span>";
break;
case 0xed: res="<span class=opcode>SET</span>";
res += " 5,<span class=register>L</span>";
break;
case 0xee: res="<span class=opcode>SET</span>";
res += " 5,(<span class=register>HL</span>)";
break;
case 0xef: res="<span class=opcode>SET</span>";
res += " 5,<span class=register>A</span>";
break;
case 0xf0: res="<span class=opcode>SET</span>";
res += " 6,<span class=register>B</span>";
break;
case 0xf1: res="<span class=opcode>SET</span>";
res += " 6,<span class=register>C</span>";
break;
case 0xf2: res="<span class=opcode>SET</span>";
res += " 6,<span class=register>D</span>";
break;
case 0xf3: res="<span class=opcode>SET</span>";
res += " 6,<span class=register>E</span>";
break;
case 0xf4: res="<span class=opcode>SET</span>";
res += " 6,<span class=register>H</span>";
break;
case 0xf5: res="<span class=opcode>SET</span>";
res += " 6,<span class=register>L</span>";
break;
case 0xf6: res="<span class=opcode>SET</span>";
res += " 6,(<span class=register>HL</span>)";
break;
case 0xf7: res="<span class=opcode>SET</span>";
res += " 6,<span class=register>A</span>";
break;
case 0xf8: res="<span class=opcode>SET</span>";
res += " 7,<span class=register>B</span>";
break;
case 0xf9: res="<span class=opcode>SET</span>";
res += " 7,<span class=register>C</span>";
break;
case 0xfa: res="<span class=opcode>SET</span>";
res += " 7,<span class=register>D</span>";
break;
case 0xfb: res="<span class=opcode>SET</span>";
res += " 7,<span class=register>E</span>";
break;
case 0xfc: res="<span class=opcode>SET</span>";
res += " 7,<span class=register>H</span>";
break;
case 0xfd: res="<span class=opcode>SET</span>";
res += " 7,<span class=register>L</span>";
break;
case 0xfe: res="<span class=opcode>SET</span>";
res += " 7,(<span class=register>HL</span>)";
break;
case 0xff: res="<span class=opcode>SET</span>";
res += " 7,<span class=register>A</span>";
break;
  }
  return [res, address];
}
function disassemble_ED(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  switch (opcode) {
case 0x40: res="<span class=opcode>IN</span>";
res += " <span class=register>B</span>,(<span class=register>C</span>)";
break;
case 0x41: res="<span class=opcode>OUT</span>";
res += " (<span class=register>C</span>),<span class=register>B</span>";
break;
case 0x42: res="<span class=opcode>SBC</span>";
res += " <span class=register>HL</span>,<span class=register>BC</span>";
break;
case 0x43: res="<span class=opcode>LD</span>";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),<span class=register>BC</span>"; address += 2;
break;
case 0x44:
case 0x4c:
case 0x54:
case 0x5c:
case 0x64:
case 0x6c:
case 0x74:
case 0x7c: res="<span class=opcode>NEG</span>";
break;
case 0x45:
case 0x4d:
case 0x55:
case 0x5d:
case 0x65:
case 0x6d:
case 0x75:
case 0x7d: res="<span class=opcode>RETN</span>";
break;
case 0x46:
case 0x4e:
case 0x66:
case 0x6e: res="<span class=opcode>IM</span>";
res += " 0";
break;
case 0x47: res="<span class=opcode>LD</span>";
res += " I,<span class=register>A</span>";
break;
case 0x48: res="<span class=opcode>IN</span>";
res += " <span class=register>C</span>,(<span class=register>C</span>)";
break;
case 0x49: res="<span class=opcode>OUT</span>";
res += " (<span class=register>C</span>),<span class=register>C</span>";
break;
case 0x4a: res="<span class=opcode>ADC</span>";
res += " <span class=register>HL</span>,<span class=register>BC</span>";
break;
case 0x4b: res="<span class=opcode>LD</span>";
res += " <span class=register>BC</span>,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x4f: res="<span class=opcode>LD</span>";
res += " R,<span class=register>A</span>";
break;
case 0x50: res="<span class=opcode>IN</span>";
res += " <span class=register>D</span>,(<span class=register>C</span>)";
break;
case 0x51: res="<span class=opcode>OUT</span>";
res += " (<span class=register>C</span>),<span class=register>D</span>";
break;
case 0x52: res="<span class=opcode>SBC</span>";
res += " <span class=register>HL</span>,<span class=register>DE</span>";
break;
case 0x53: res="<span class=opcode>LD</span>";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),<span class=register>DE</span>"; address += 2;
break;
case 0x56:
case 0x76: res="<span class=opcode>IM</span>";
res += " 1";
break;
case 0x57: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,I";
break;
case 0x58: res="<span class=opcode>IN</span>";
res += " <span class=register>E</span>,(<span class=register>C</span>)";
break;
case 0x59: res="<span class=opcode>OUT</span>";
res += " (<span class=register>C</span>),<span class=register>E</span>";
break;
case 0x5a: res="<span class=opcode>ADC</span>";
res += " <span class=register>HL</span>,<span class=register>DE</span>";
break;
case 0x5b: res="<span class=opcode>LD</span>";
res += " <span class=register>DE</span>,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x5e:
case 0x7e: res="<span class=opcode>IM</span>";
res += " 2";
break;
case 0x5f: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,R";
break;
case 0x60: res="<span class=opcode>IN</span>";
res += " <span class=register>H</span>,(<span class=register>C</span>)";
break;
case 0x61: res="<span class=opcode>OUT</span>";
res += " (<span class=register>C</span>),<span class=register>H</span>";
break;
case 0x62: res="<span class=opcode>SBC</span>";
res += " <span class=register>HL</span>,<span class=register>HL</span>";
break;
case 0x63: res="<span class=opcode>LD</span>";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),<span class=register>HL</span>"; address += 2;
break;
case 0x67: res="<span class=opcode>RRD</span>";
break;
case 0x68: res="<span class=opcode>IN</span>";
res += " <span class=register>L</span>,(<span class=register>C</span>)";
break;
case 0x69: res="<span class=opcode>OUT</span>";
res += " (<span class=register>C</span>),<span class=register>L</span>";
break;
case 0x6a: res="<span class=opcode>ADC</span>";
res += " <span class=register>HL</span>,<span class=register>HL</span>";
break;
case 0x6b: res="<span class=opcode>LD</span>";
res += " <span class=register>HL</span>,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x6f: res="<span class=opcode>RLD</span>";
break;
case 0x70: res="<span class=opcode>IN</span>";
res += " <span class=register>F</span>,(<span class=register>C</span>)";
break;
case 0x71: res="<span class=opcode>OUT</span>";
res += " (<span class=register>C</span>),0";
break;
case 0x72: res="<span class=opcode>SBC</span>";
res += " <span class=register>HL</span>,<span class=register>SP</span>";
break;
case 0x73: res="<span class=opcode>LD</span>";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),<span class=register>SP</span>"; address += 2;
break;
case 0x78: res="<span class=opcode>IN</span>";
res += " <span class=register>A</span>,(<span class=register>C</span>)";
break;
case 0x79: res="<span class=opcode>OUT</span>";
res += " (<span class=register>C</span>),<span class=register>A</span>";
break;
case 0x7a: res="<span class=opcode>ADC</span>";
res += " <span class=register>HL</span>,<span class=register>SP</span>";
break;
case 0x7b: res="<span class=opcode>LD</span>";
res += " <span class=register>SP</span>,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0xa0: res="<span class=opcode>LDI</span>";
break;
case 0xa1: res="<span class=opcode>CPI</span>";
break;
case 0xa2: res="<span class=opcode>INI</span>";
break;
case 0xa3: res="<span class=opcode>OUTI</span>";
break;
case 0xa8: res="<span class=opcode>LDD</span>";
break;
case 0xa9: res="<span class=opcode>CPD</span>";
break;
case 0xaa: res="<span class=opcode>IND</span>";
break;
case 0xab: res="<span class=opcode>OUTD</span>";
break;
case 0xb0: res="<span class=opcode>LDIR</span>";
break;
case 0xb1: res="<span class=opcode>CPIR</span>";
break;
case 0xb2: res="<span class=opcode>INIR</span>";
break;
case 0xb3: res="<span class=opcode>OTIR</span>";
break;
case 0xb8: res="<span class=opcode>LDDR</span>";
break;
case 0xb9: res="<span class=opcode>CPDR</span>";
break;
case 0xba: res="<span class=opcode>INDR</span>";
break;
case 0xbb: res="<span class=opcode>OTDR</span>";
break;
  }
  return [res, address];
}
var dis_REGISTER;
function disassemble_DD(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  dis_REGISTER = "IX";
  switch (opcode) {
case 0x09: res="<span class=opcode>ADD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,<span class=register>BC</span>";
break;
case 0x19: res="<span class=opcode>ADD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,<span class=register>DE</span>";
break;
case 0x21: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x22: res="<span class=opcode>LD</span>";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),<span class=register>" + dis_REGISTER + "</span>"; address += 2;
break;
case 0x23: res="<span class=opcode>INC</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0x24: res="<span class=opcode>INC</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x25: res="<span class=opcode>DEC</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x26: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x29: res="<span class=opcode>ADD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,<span class=register>" + dis_REGISTER + "</span>";
break;
case 0x2a: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x2b: res="<span class=opcode>DEC</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0x2c: res="<span class=opcode>INC</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x2d: res="<span class=opcode>DEC</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x2e: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x34: res="<span class=opcode>INC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x35: res="<span class=opcode>DEC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x36: res="<span class=opcode>LD</span>";
res += " (<span class=register>" + dis_REGISTER + "</span>+dd),0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x39: res="<span class=opcode>ADD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,<span class=register>SP</span>";
break;
case 0x44: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x45: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x46: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x4c: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x4d: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x4e: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x54: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x55: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x56: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x5c: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x5d: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x5e: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x60: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>B</span>";
break;
case 0x61: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>C</span>";
break;
case 0x62: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>D</span>";
break;
case 0x63: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>E</span>";
break;
case 0x64: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x65: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x66: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x67: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>A</span>";
break;
case 0x68: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>B</span>";
break;
case 0x69: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>C</span>";
break;
case 0x6a: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>D</span>";
break;
case 0x6b: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>E</span>";
break;
case 0x6c: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x6d: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x6e: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x6f: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>A</span>";
break;
case 0x70: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>B</span>"; address += 1;
break;
case 0x71: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>C</span>"; address += 1;
break;
case 0x72: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>D</span>"; address += 1;
break;
case 0x73: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>E</span>"; address += 1;
break;
case 0x74: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>H</span>"; address += 1;
break;
case 0x75: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>L</span>"; address += 1;
break;
case 0x77: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>A</span>"; address += 1;
break;
case 0x7c: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x7d: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x7e: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x84: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x85: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x86: res="<span class=opcode>ADD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8c: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x8d: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x8e: res="<span class=opcode>ADC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x94: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x95: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x96: res="<span class=opcode>SUB</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9c: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x9d: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x9e: res="<span class=opcode>SBC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa4: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0xa5: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0xa6: res="<span class=opcode>AND</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xac: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0xad: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0xae: res="<span class=opcode>XOR</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb4: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0xb5: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0xb6: res="<span class=opcode>OR</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbc: res="<span class=opcode>CP</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0xbd: res="<span class=opcode>CP</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0xbe: res="<span class=opcode>CP</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcb: return disassemble_DDFDCB(address);
case 0xe1: res="<span class=opcode>POP</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0xe3: res="<span class=opcode>EX</span>";
res += " (<span class=register>SP</span>),<span class=register>" + dis_REGISTER + "</span>";
break;
case 0xe5: res="<span class=opcode>PUSH</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0xe9: res="<span class=opcode>JP</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0xf9: res="<span class=opcode>LD</span>";
res += " <span class=register>SP</span>,<span class=register>" + dis_REGISTER + "</span>";
break;
  }
  return [res, address];
}
function disassemble_FD(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  dis_REGISTER = "IY";
  switch (opcode) {
case 0x09: res="<span class=opcode>ADD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,<span class=register>BC</span>";
break;
case 0x19: res="<span class=opcode>ADD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,<span class=register>DE</span>";
break;
case 0x21: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x22: res="<span class=opcode>LD</span>";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),<span class=register>" + dis_REGISTER + "</span>"; address += 2;
break;
case 0x23: res="<span class=opcode>INC</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0x24: res="<span class=opcode>INC</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x25: res="<span class=opcode>DEC</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x26: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x29: res="<span class=opcode>ADD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,<span class=register>" + dis_REGISTER + "</span>";
break;
case 0x2a: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x2b: res="<span class=opcode>DEC</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0x2c: res="<span class=opcode>INC</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x2d: res="<span class=opcode>DEC</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x2e: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x34: res="<span class=opcode>INC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x35: res="<span class=opcode>DEC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x36: res="<span class=opcode>LD</span>";
res += " (<span class=register>" + dis_REGISTER + "</span>+dd),0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x39: res="<span class=opcode>ADD</span>";
res += " <span class=register>" + dis_REGISTER + "</span>,<span class=register>SP</span>";
break;
case 0x44: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x45: res="<span class=opcode>LD</span>";
res += " <span class=register>B</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x46: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x4c: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x4d: res="<span class=opcode>LD</span>";
res += " <span class=register>C</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x4e: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x54: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x55: res="<span class=opcode>LD</span>";
res += " <span class=register>D</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x56: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x5c: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x5d: res="<span class=opcode>LD</span>";
res += " <span class=register>E</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x5e: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x60: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>B</span>";
break;
case 0x61: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>C</span>";
break;
case 0x62: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>D</span>";
break;
case 0x63: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>E</span>";
break;
case 0x64: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x65: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x66: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x67: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "H" + "</span>,<span class=register>A</span>";
break;
case 0x68: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>B</span>";
break;
case 0x69: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>C</span>";
break;
case 0x6a: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>D</span>";
break;
case 0x6b: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>E</span>";
break;
case 0x6c: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x6d: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x6e: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x6f: res="<span class=opcode>LD</span>";
res += " <span class=register>" + dis_REGISTER + "L" + "</span>,<span class=register>A</span>";
break;
case 0x70: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>B</span>"; address += 1;
break;
case 0x71: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>C</span>"; address += 1;
break;
case 0x72: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>D</span>"; address += 1;
break;
case 0x73: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>E</span>"; address += 1;
break;
case 0x74: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>H</span>"; address += 1;
break;
case 0x75: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>L</span>"; address += 1;
break;
case 0x77: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + "),<span class=register>A</span>"; address += 1;
break;
case 0x7c: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x7d: res="<span class=opcode>LD</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x7e: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x84: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x85: res="<span class=opcode>ADD</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x86: res="<span class=opcode>ADD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8c: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x8d: res="<span class=opcode>ADC</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x8e: res="<span class=opcode>ADC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x94: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x95: res="<span class=opcode>SUB</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x96: res="<span class=opcode>SUB</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9c: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0x9d: res="<span class=opcode>SBC</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0x9e: res="<span class=opcode>SBC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa4: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0xa5: res="<span class=opcode>AND</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0xa6: res="<span class=opcode>AND</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xac: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0xad: res="<span class=opcode>XOR</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0xae: res="<span class=opcode>XOR</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb4: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0xb5: res="<span class=opcode>OR</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0xb6: res="<span class=opcode>OR</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbc: res="<span class=opcode>CP</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "H" + "</span>";
break;
case 0xbd: res="<span class=opcode>CP</span>";
res += " <span class=register>A</span>,<span class=register>" + dis_REGISTER + "L" + "</span>";
break;
case 0xbe: res="<span class=opcode>CP</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcb: return disassemble_DDFDCB(address);
case 0xe1: res="<span class=opcode>POP</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0xe3: res="<span class=opcode>EX</span>";
res += " (<span class=register>SP</span>),<span class=register>" + dis_REGISTER + "</span>";
break;
case 0xe5: res="<span class=opcode>PUSH</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0xe9: res="<span class=opcode>JP</span>";
res += " <span class=register>" + dis_REGISTER + "</span>";
break;
case 0xf9: res="<span class=opcode>LD</span>";
res += " <span class=register>SP</span>,<span class=register>" + dis_REGISTER + "</span>";
break;
  }
  return [res, address];
}
function disassemble_DDFDCB(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  switch (opcode) {
case 0x00: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RLC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x01: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RLC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x02: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RLC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x03: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RLC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x04: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RLC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x05: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RLC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x06: res="<span class=opcode>RLC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x07: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RLC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x08: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RRC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x09: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RRC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0a: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RRC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0b: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RRC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0c: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RRC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0d: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RRC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0e: res="<span class=opcode>RRC</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0f: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RRC (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x10: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x11: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x12: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x13: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x14: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x15: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x16: res="<span class=opcode>RL</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x17: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x18: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RR (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x19: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RR (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1a: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RR (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1b: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RR (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1c: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RR (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1d: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RR (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1e: res="<span class=opcode>RR</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1f: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RR (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x20: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SLA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x21: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SLA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x22: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SLA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x23: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SLA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x24: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SLA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x25: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SLA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x26: res="<span class=opcode>SLA</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x27: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SLA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x28: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SRA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x29: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SRA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2a: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SRA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2b: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SRA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2c: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SRA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2d: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SRA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2e: res="<span class=opcode>SRA</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2f: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SRA (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x30: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SLL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x31: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SLL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x32: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SLL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x33: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SLL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x34: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SLL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x35: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SLL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x36: res="<span class=opcode>SLL</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x37: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SLL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x38: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SRL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x39: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SRL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3a: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SRL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3b: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SRL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3c: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SRL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3d: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SRL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3e: res="<span class=opcode>SRL</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3f: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SRL (<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x40:
case 0x41:
case 0x42:
case 0x43:
case 0x44:
case 0x45:
case 0x46:
case 0x47: res="<span class=opcode>BIT</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x48:
case 0x49:
case 0x4a:
case 0x4b:
case 0x4c:
case 0x4d:
case 0x4e:
case 0x4f: res="<span class=opcode>BIT</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x50:
case 0x51:
case 0x52:
case 0x53:
case 0x54:
case 0x55:
case 0x56:
case 0x57: res="<span class=opcode>BIT</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x58:
case 0x59:
case 0x5a:
case 0x5b:
case 0x5c:
case 0x5d:
case 0x5e:
case 0x5f: res="<span class=opcode>BIT</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x60:
case 0x61:
case 0x62:
case 0x63:
case 0x64:
case 0x65:
case 0x66:
case 0x67: res="<span class=opcode>BIT</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x68:
case 0x69:
case 0x6a:
case 0x6b:
case 0x6c:
case 0x6d:
case 0x6e:
case 0x6f: res="<span class=opcode>BIT</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x70:
case 0x71:
case 0x72:
case 0x73:
case 0x74:
case 0x75:
case 0x76:
case 0x77: res="<span class=opcode>BIT</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x78:
case 0x79:
case 0x7a:
case 0x7b:
case 0x7c:
case 0x7d:
case 0x7e:
case 0x7f: res="<span class=opcode>BIT</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x80: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RES 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x81: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RES 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x82: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RES 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x83: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RES 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x84: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RES 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x85: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RES 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x86: res="<span class=opcode>RES</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x87: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RES 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x88: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RES 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x89: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RES 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8a: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RES 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8b: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RES 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8c: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RES 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8d: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RES 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8e: res="<span class=opcode>RES</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8f: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RES 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x90: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RES 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x91: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RES 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x92: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RES 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x93: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RES 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x94: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RES 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x95: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RES 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x96: res="<span class=opcode>RES</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x97: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RES 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x98: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RES 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x99: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RES 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9a: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RES 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9b: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RES 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9c: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RES 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9d: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RES 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9e: res="<span class=opcode>RES</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9f: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RES 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa0: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RES 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa1: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RES 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa2: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RES 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa3: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RES 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa4: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RES 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa5: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RES 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa6: res="<span class=opcode>RES</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa7: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RES 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa8: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RES 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa9: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RES 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xaa: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RES 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xab: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RES 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xac: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RES 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xad: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RES 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xae: res="<span class=opcode>RES</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xaf: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RES 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb0: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RES 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb1: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RES 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb2: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RES 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb3: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RES 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb4: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RES 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb5: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RES 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb6: res="<span class=opcode>RES</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb7: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RES 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb8: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,RES 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb9: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,RES 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xba: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,RES 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbb: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,RES 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbc: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,RES 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbd: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,RES 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbe: res="<span class=opcode>RES</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbf: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,RES 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc0: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SET 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc1: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SET 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc2: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SET 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc3: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SET 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc4: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SET 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc5: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SET 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc6: res="<span class=opcode>SET</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc7: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SET 0,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc8: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SET 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc9: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SET 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xca: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SET 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcb: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SET 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcc: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SET 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcd: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SET 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xce: res="<span class=opcode>SET</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcf: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SET 1,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd0: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SET 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd1: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SET 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd2: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SET 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd3: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SET 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd4: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SET 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd5: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SET 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd6: res="<span class=opcode>SET</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd7: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SET 2,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd8: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SET 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd9: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SET 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xda: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SET 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xdb: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SET 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xdc: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SET 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xdd: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SET 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xde: res="<span class=opcode>SET</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xdf: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SET 3,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe0: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SET 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe1: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SET 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe2: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SET 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe3: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SET 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe4: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SET 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe5: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SET 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe6: res="<span class=opcode>SET</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe7: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SET 4,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe8: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SET 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe9: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SET 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xea: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SET 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xeb: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SET 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xec: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SET 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xed: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SET 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xee: res="<span class=opcode>SET</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xef: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SET 5,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf0: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SET 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf1: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SET 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf2: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SET 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf3: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SET 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf4: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SET 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf5: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SET 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf6: res="<span class=opcode>SET</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf7: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SET 6,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf8: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>B</span>,SET 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf9: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>C</span>,SET 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfa: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>D</span>,SET 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfb: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>E</span>,SET 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfc: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>H</span>,SET 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfd: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>L</span>,SET 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfe: res="<span class=opcode>SET</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xff: res="<span class=opcode>LD</span>";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " <span class=register>A</span>,SET 7,(<span class=register>" + dis_REGISTER + "</span>" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
  }
  return [res, address];
}
